/*
 * Enhanced SimpleDragWireframe Component
 * 
 * Features:
 * 1. Cross-container moves - Elements can be moved between .row, .col, .section, etc.
 * 2. Drag mode toggle - Button to enable/disable dragging to prevent accidental moves
 * 3. Ordering metadata - Semantic structure tracking for better diffing
 * 
 * Usage:
 * <SimpleDragWireframe 
 *   htmlContent={wireframeHtml}
 *   onUpdateContent={(newHtml) => setWireframeHtml(newHtml)}
 *   onOrderingChange={(metadata) => console.log('Structure changed:', metadata)}
 * />
 */

import React, { useEffect, useRef, useState } from 'react';
import dragula from 'dragula';
import 'dragula/dist/dragula.css';
import './SimpleDragWireframe.css';

interface OrderingMetadata {
    id: string;
    tagName: string;
    className?: string;
    textContent?: string;
    children: OrderingMetadata[];
}

interface SimpleDragWireframeProps {
    htmlContent: string;
    onUpdateContent?: (newContent: string) => void;
    onOrderingChange?: (metadata: OrderingMetadata[]) => void;
}

// Generate ordering metadata from DOM structure
function generateOrderingMetadata(element: Element, index: number = 0): OrderingMetadata {
    const id = element.id || `element-${element.tagName.toLowerCase()}-${index}`;

    return {
        id,
        tagName: element.tagName.toLowerCase(),
        className: element.className || undefined,
        textContent: element.textContent?.trim().substring(0, 50) || undefined,
        children: Array.from(element.children).map((child, childIndex) =>
            generateOrderingMetadata(child, childIndex)
        )
    };
}

// Find all containers that can accept drops (rows, cols, sections, etc.)
function findDragContainers(rootElement: HTMLElement): HTMLElement[] {
    const containers = [rootElement]; // Always include the root
    const selectors = [
        '.row', '.col', '.column',
        '.container', '.section', '.grid',
        '[data-droppable="true"]',
        '.card-body', '.panel-body'
    ];

    selectors.forEach(selector => {
        const elements = rootElement.querySelectorAll(selector);
        elements.forEach(el => {
            if (el instanceof HTMLElement) {
                containers.push(el);
            }
        });
    });

    return [...new Set(containers)]; // Remove duplicates
}
function sanitizeHTML(html: string): string {
    if (!html || typeof html !== 'string') {
        return '';
    }

    try {
        // Clean up common AI response artifacts and malformed HTML
        let cleanHtml = html.trim();

        // Remove markdown code blocks if they exist
        cleanHtml = cleanHtml.replace(/^```html\s*/gi, '');
        cleanHtml = cleanHtml.replace(/^```\s*/gi, '');
        cleanHtml = cleanHtml.replace(/```\s*$/gi, '');

        // Remove any leading/trailing quotes or artifacts
        cleanHtml = cleanHtml.replace(/^['"`]+|['"`]+$/g, '');

        // If it's a complete HTML document, extract styles and body content
        if (cleanHtml.includes('<html') && cleanHtml.includes('</html>')) {
            // Extract styles from head
            const styleMatches = cleanHtml.match(/<style[^>]*>([\s\S]*?)<\/style>/gi);
            let styles = '';
            if (styleMatches) {
                styles = styleMatches.join('\n');
            }

            // Extract body content
            const bodyMatch = cleanHtml.match(/<body[^>]*>([\s\S]*?)<\/body>/i);
            if (bodyMatch) {
                // Combine styles with body content
                cleanHtml = styles + bodyMatch[1];
            }
        }

        // Validate that we have some HTML tags
        if (!cleanHtml.includes('<') || !cleanHtml.includes('>')) {
            return `<div style="padding: 20px; color: #666; font-family: 'Segoe UI', sans-serif;">
                <p><strong>⚠️ HTML Rendering Issue</strong></p>
                <p>The wireframe content appears to be malformed. Please try regenerating the wireframe.</p>
            </div>`;
        }

        return cleanHtml;
    } catch (error) {
        return `<div style="padding: 20px; color: #dc3545; font-family: 'Segoe UI', sans-serif;">
            <p><strong>❌ HTML Parsing Error</strong></p>
            <p>Failed to parse wireframe content. Please try regenerating the wireframe.</p>
        </div>`;
    }
}

const SimpleDragWireframe: React.FC<SimpleDragWireframeProps> = ({
    htmlContent,
    onUpdateContent,
    onOrderingChange
}) => {
    const containerRef = useRef<HTMLDivElement>(null);
    const dragulaRef = useRef<any>(null);
    const [isDragEnabled, setIsDragEnabled] = useState(false);
    const [dragContainers, setDragContainers] = useState<HTMLElement[]>([]);

    // Function to make elements editable
    const makeElementsEditable = (container: HTMLElement) => {
        if (!container) return;

        const editableSelectors = [
            'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
            'p', 'span', 'div', 'a', 'button',
            'li', 'td', 'th', 'label'
        ];

        editableSelectors.forEach(selector => {
            const elements = container.querySelectorAll(selector);
            elements.forEach(element => {
                if (element instanceof HTMLElement) {
                    // Skip if already processed or is a container
                    if (element.getAttribute('data-editable') === 'true' ||
                        element.classList.contains('dragula-container') ||
                        element.classList.contains('row') ||
                        element.classList.contains('col')) {
                        return;
                    }

                    // Only make editable if it has text content
                    if (element.textContent && element.textContent.trim()) {
                        element.setAttribute('data-editable', 'true');
                        element.addEventListener('click', handleElementClick);
                    }
                }
            });
        });
    };

    // Handle click on editable elements
    const handleElementClick = (event: Event) => {
        event.stopPropagation();

        const element = event.target as HTMLElement;
        if (!element || element.contentEditable === 'true') return;

        // Make element editable
        element.contentEditable = 'true';
        element.focus();

        // Select all text
        const range = document.createRange();
        range.selectNodeContents(element);
        const selection = window.getSelection();
        selection?.removeAllRanges();
        selection?.addRange(range);

        // Handle blur (finish editing)
        const handleBlur = () => {
            element.contentEditable = 'false';
            element.removeEventListener('blur', handleBlur);
            element.removeEventListener('keydown', handleKeyDown);

            // Update content
            if (containerRef.current && onUpdateContent) {
                const newContent = containerRef.current.innerHTML;
                onUpdateContent(newContent);
                updateOrderingMetadata();
            }
        };

        // Handle enter key (finish editing)
        const handleKeyDown = (e: KeyboardEvent) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                element.blur();
            }
            if (e.key === 'Escape') {
                e.preventDefault();
                element.blur();
            }
        };

        element.addEventListener('blur', handleBlur);
        element.addEventListener('keydown', handleKeyDown);
    };

    // Function to update ordering metadata
    const updateOrderingMetadata = () => {
        if (!containerRef.current || !onOrderingChange) return;

        const metadata = Array.from(containerRef.current.children).map((child, index) =>
            generateOrderingMetadata(child, index)
        );
        onOrderingChange(metadata);
    };

    // Function to toggle drag mode
    const toggleDragMode = () => {
        setIsDragEnabled(!isDragEnabled);
    };

    useEffect(() => {
        if (!containerRef.current) return;

        // Clean up previous dragula instance
        if (dragulaRef.current) {
            dragulaRef.current.destroy();
        }

        // Sanitize and parse the HTML content safely
        const sanitizedHTML = sanitizeHTML(htmlContent);

        try {
            // Use innerHTML only after sanitization
            containerRef.current.innerHTML = sanitizedHTML;
        } catch (error) {
            containerRef.current.innerHTML = `<div style="padding: 20px; color: #dc3545; font-family: 'Segoe UI', sans-serif;">
                <p><strong>❌ Wireframe Rendering Error</strong></p>
                <p>Could not render the wireframe. Please try regenerating it.</p>
            </div>`;
            return;
        }

        // Find all containers that can accept drops
        const containers = findDragContainers(containerRef.current);
        setDragContainers(containers);

        // Make elements editable for inline editing
        makeElementsEditable(containerRef.current);

    useEffect(() => {
        if (!containerRef.current) return;

        // Clean up previous dragula instance
        if (dragulaRef.current) {
            dragulaRef.current.destroy();
        }

        // Sanitize and parse the HTML content safely
        const sanitizedHTML = sanitizeHTML(htmlContent);

        try {
            // Use innerHTML only after sanitization
            containerRef.current.innerHTML = sanitizedHTML;
        } catch (error) {
            containerRef.current.innerHTML = `<div style="padding: 20px; color: #dc3545; font-family: 'Segoe UI', sans-serif;">
                <p><strong>❌ Wireframe Rendering Error</strong></p>
                <p>Could not render the wireframe. Please try regenerating it.</p>
            </div>`;
            return;
        }

        // Find all containers that can accept drops
        const containers = findDragContainers(containerRef.current);
        setDragContainers(containers);

        // Make elements editable for inline editing
        makeElementsEditable(containerRef.current);

        // Initial metadata generation
        updateOrderingMetadata();

        return () => {
            // Clean up event listeners
            if (containerRef.current) {
                const editableElements = containerRef.current.querySelectorAll('[data-editable="true"]');
                editableElements.forEach(element => {
                    element.removeEventListener('click', handleElementClick);
                });
            }
        };
    }, [htmlContent, onUpdateContent, onOrderingChange]); // Removed isDragEnabled from dependencies

    // Separate effect for dragula initialization that responds to drag mode changes
    useEffect(() => {
        if (!containerRef.current || dragContainers.length === 0) return;

        // Clean up previous dragula instance
        if (dragulaRef.current) {
            dragulaRef.current.destroy();
        }

        // Initialize dragula with cross-container support
        dragulaRef.current = dragula(dragContainers, {
            moves: function (el, source, handle, sibling) {
                // Only allow moves if drag mode is enabled
                if (!isDragEnabled) return false;
                
                // Allow all elements to be moved
                return true;
            },
            accepts: function (el, target, source, sibling) {
                // Allow cross-container moves (ensure target is HTMLElement)
                return target instanceof HTMLElement && dragContainers.includes(target);
            },
            invalid: function (el, handle) {
                // Don't allow dragging of form inputs, buttons, links, or elements being actively edited
                if (!(el instanceof HTMLElement)) return true;

                return el.tagName === 'INPUT' ||
                    el.tagName === 'BUTTON' ||
                    el.tagName === 'A' ||
                    el.contentEditable === 'true'; // Only prevent if actively being edited
            }
        });

        // Update content and metadata when items are moved
        dragulaRef.current.on('drop', () => {
            if (containerRef.current && onUpdateContent) {
                try {
                    const newContent = containerRef.current.innerHTML;
                    onUpdateContent(newContent);
                    updateOrderingMetadata();
                } catch (error) {
                    // Silent error handling
                }
            }
        });

        return () => {
            if (dragulaRef.current) {
                dragulaRef.current.destroy();
            }
        };
    }, [isDragEnabled, dragContainers]); // Only re-run when drag mode or containers change

    return (
        <div className="simple-drag-wireframe">
            {/* Drag Mode Toggle */}
            <div className="drag-mode-controls">
                <button
                    className={`drag-toggle-btn ${isDragEnabled ? 'enabled' : 'disabled'}`}
                    onClick={toggleDragMode}
                    title={isDragEnabled ? "Click to disable drag mode" : "Click to enable drag mode"}
                >
                    {isDragEnabled ? (
                        <>
                            🔒 <span>Drag Mode: ON</span>
                        </>
                    ) : (
                        <>
                            🔓 <span>Drag Mode: OFF</span>
                        </>
                    )}
                </button>
                <small className="drag-mode-hint">
                    {isDragEnabled
                        ? "You can drag and drop elements. Click to lock."
                        : "Drag mode disabled. Click to enable dragging."
                    }
                </small>
            </div>

            {/* Main wireframe container */}
            <div
                ref={containerRef}
                className={`dragula-container ${isDragEnabled ? 'drag-enabled' : 'drag-disabled'}`}
            ></div>

            {/* Info about containers */}
            {dragContainers.length > 1 && (
                <div className="drag-info">
                    <small>
                        ℹ️ Cross-container dragging enabled: {dragContainers.length} drop zones detected
                    </small>
                </div>
            )}
        </div>
    );
};

export default SimpleDragWireframe;
