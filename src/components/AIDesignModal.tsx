import React, { useState, useEffect } from 'react';
import { FiX, FiLoader, FiCheckCircle, FiAlertCircle, FiCopy } from 'react-icons/fi';
import { designConsultant } from '../services/designConsultant';
import '../styles/AIDesignModal.css';

interface AIDesignModalProps {
    isOpen: boolean;
    onClose: () => void;
    mode: 'analyze' | 'tips';
    wireframeHtml?: string;
}

const AIDesignModal: React.FC<AIDesignModalProps> = ({
    isOpen,
    onClose,
    mode,
    wireframeHtml
}) => {
    const [loading, setLoading] = useState(false);
    const [result, setResult] = useState<string>('');
    const [error, setError] = useState<string>('');
    const [copySuccess, setCopySuccess] = useState(false);

    useEffect(() => {
        if (isOpen && mode === 'tips') {
            // Auto-load quick tips when modal opens
            loadQuickTips();
        }
        if (!isOpen) {
            // Reset state when modal closes
            setResult('');
            setError('');
            setLoading(false);
            setCopySuccess(false);
        }
    }, [isOpen, mode]);

    const copyToClipboard = async () => {
        if (!result) return;

        try {
            // Create a formatted version for copying
            const timestamp = new Date().toLocaleString();
            const title = mode === 'analyze' ? 'Design Analysis Results' : 'Quick Design Tips';
            const formattedContent = `${title}
Generated on: ${timestamp}
Powered by: Azure AI Foundry (GPT-4)

${result}

---
Generated by Designetica AI Design Assistant
`;

            await navigator.clipboard.writeText(formattedContent);
            setCopySuccess(true);

            // Reset success state after 2 seconds
            setTimeout(() => setCopySuccess(false), 2000);
        } catch (err) {
            console.error('Failed to copy to clipboard:', err);
            // Fallback for older browsers
            const textArea = document.createElement('textarea');
            textArea.value = result;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            setCopySuccess(true);
            setTimeout(() => setCopySuccess(false), 2000);
        }
    };

    const loadQuickTips = async () => {
        setLoading(true);
        setError('');
        try {
            const tips = await designConsultant.getQuickTips('landing page', 'desktop');
            if (tips.success && tips.tips) {
                setResult(tips.tips);
            } else {
                setError(tips.error || 'Unable to generate quick tips');
            }
        } catch (err) {
            setError('Failed to connect to AI Design Assistant');
        } finally {
            setLoading(false);
        }
    };

    const analyzeDesign = async () => {
        if (!wireframeHtml) {
            setError('No wireframe content to analyze');
            return;
        }

        setLoading(true);
        setError('');
        try {
            const analysis = await designConsultant.analyzeWireframe(wireframeHtml);
            if (analysis.success && analysis.analysis) {
                setResult(analysis.analysis);
            } else {
                setError(analysis.error || analysis.fallback || 'Unable to analyze wireframe');
            }
        } catch (err) {
            setError('Failed to connect to AI Design Assistant');
        } finally {
            setLoading(false);
        }
    };

    if (!isOpen) return null;

    return (
        <div className="ai-design-modal-overlay" onClick={onClose}>
            <div className="ai-design-modal" onClick={(e) => e.stopPropagation()}>
                <div className="ai-design-modal-header">
                    <h2>
                        {mode === 'analyze' ? 'ðŸŽ¨ Design Analysis' : 'ðŸ’¡ Quick Design Tips'}
                    </h2>
                    <button
                        className="ai-design-modal-close"
                        onClick={onClose}
                        aria-label="Close modal"
                    >
                        <FiX />
                    </button>
                </div>

                <div className="ai-design-modal-content">
                    {mode === 'analyze' && !loading && !result && !error && (
                        <div className="ai-design-modal-start">
                            <p>Get AI-powered analysis of your current wireframe design with specific improvement recommendations.</p>
                            <button
                                className="ai-design-btn primary"
                                onClick={analyzeDesign}
                                disabled={!wireframeHtml}
                            >
                                ðŸŽ¨ Analyze Current Design
                            </button>
                            {!wireframeHtml && (
                                <p className="ai-design-note">Create a wireframe first to get analysis</p>
                            )}
                        </div>
                    )}

                    {loading && (
                        <div className="ai-design-loading">
                            <FiLoader className="spinning" />
                            <p>
                                {mode === 'analyze'
                                    ? 'AI is analyzing your wireframe design...'
                                    : 'AI is generating quick design tips...'
                                }
                            </p>
                            <small>Powered by Azure AI Foundry</small>
                        </div>
                    )}

                    {error && (
                        <div className="ai-design-error">
                            <FiAlertCircle />
                            <p>Error: {error}</p>
                            <button
                                className="ai-design-btn secondary"
                                onClick={mode === 'analyze' ? analyzeDesign : loadQuickTips}
                            >
                                Try Again
                            </button>
                        </div>
                    )}

                    {result && (
                        <div className="ai-design-result">
                            <div className="ai-design-success-header">
                                <FiCheckCircle />
                                <span>
                                    {mode === 'analyze'
                                        ? 'Design Analysis Complete'
                                        : 'Quick Tips Generated'
                                    }
                                </span>
                            </div>
                            <div className="ai-design-result-content">
                                {result.split('\n').map((line, index) => (
                                    <p key={index}>{line}</p>
                                ))}
                            </div>
                            <div className="ai-design-footer">
                                <small>âœ¨ Powered by Azure AI Foundry (GPT-4)</small>
                            </div>
                        </div>
                    )}
                </div>

                {result && (
                    <div className="ai-design-modal-actions">
                        <button
                            className="ai-design-btn secondary"
                            onClick={mode === 'analyze' ? analyzeDesign : loadQuickTips}
                        >
                            Generate New {mode === 'analyze' ? 'Analysis' : 'Tips'}
                        </button>
                        <button
                            className={`ai-design-btn ${copySuccess ? 'success' : 'copy'}`}
                            onClick={copyToClipboard}
                            disabled={copySuccess}
                            title="Copy results to clipboard for later review"
                        >
                            <FiCopy />
                            {copySuccess ? 'Copied!' : 'Copy Results'}
                        </button>
                        <button
                            className="ai-design-btn primary"
                            onClick={onClose}
                        >
                            Close
                        </button>
                    </div>
                )}
            </div>
        </div>
    );
};

export default AIDesignModal;