import React, { useRef, useEffect, useState } from 'react';
import './WireframeRenderer.css';

interface WireframeRendererProps {
  htmlContent: string;
  theme?: string;
}

/**
 * A secure sandbox for rendering wireframes generated by AI
 * Uses an iframe with sandbox attributes to allow controlled script execution
 */
const WireframeRenderer: React.FC<WireframeRendererProps> = ({
  htmlContent,
  theme = 'microsoftlearn'
}) => {
  const iframeRef = useRef<HTMLIFrameElement>(null);
  const [renderKey, setRenderKey] = useState<number>(Date.now());
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // Check for valid content
    if (htmlContent && typeof htmlContent === 'string') {
      setError(null);
    } else {
      setError("Invalid HTML content received");
    }

    // Reset the render key when content changes to force iframe refresh
    setRenderKey(Date.now());
  }, [htmlContent]);

  useEffect(() => {
    if (iframeRef.current) {
      const iframe = iframeRef.current;
      const doc = iframe.contentDocument || iframe.contentWindow?.document;

      if (doc) {
        // Inject wireframe content with styling and theme
        doc.open();
        doc.write(`
          <!DOCTYPE html>
          <html>
            <head>
              <style>
                /* Base styles */
                body {
                  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
                  margin: 0;
                  padding: 8px; /* Minimal padding for content breathing room */
                  background-color: transparent;
                  color: #333;
                  line-height: 1.6;
                }
                
                /* Microsoft Learn theme */
                ${theme === 'microsoftlearn' ? `
                  :root {
                    --primary: #0078d4;
                    --secondary: #106ebe;
                    --accent: #50e6ff;
                    --background: #faf9f8;
                    --text-primary: #323130;
                    --text-secondary: #605e5c;
                    --border: #edebe9;
                  }
                  
                  h1, h2, h3, h4, h5, h6 {
                    color: var(--primary);
                    font-weight: 600;
                    margin-top: 0.5em;
                    margin-bottom: 0.5em;
                  }
                  
                  button, .button {
                    background-color: var(--primary);
                    color: white;
                    border: none;
                    padding: 8px 16px;
                    border-radius: 2px;
                    cursor: pointer;
                    font-weight: 600;
                  }
                  
                  button:hover, .button:hover {
                    background-color: var(--secondary);
                  }
                  
                  a {
                    color: var(--primary);
                    text-decoration: none;
                  }
                  
                  a:hover {
                    text-decoration: underline;
                  }
                  
                  .card {
                    border: 1px solid var(--border);
                    border-radius: 4px;
                    padding: 20px;
                    margin-bottom: 20px;
                    background-color: white;
                  }
                ` : ''}
                
                /* Modern theme */
                ${theme === 'modern' ? `
                  :root {
                    --primary: #7c4dff;
                    --secondary: #651fff;
                    --accent: #b388ff;
                    --background: #f5f5f5;
                    --text-primary: #212121;
                    --text-secondary: #757575;
                    --border: #e0e0e0;
                  }
                  
                  body {
                    background-color: var(--background);
                    color: var(--text-primary);
                    font-family: 'Roboto', -apple-system, BlinkMacSystemFont, "Segoe UI", Arial, sans-serif;
                  }
                  
                  h1, h2, h3, h4, h5, h6 {
                    color: var(--primary);
                    font-weight: 500;
                  }
                  
                  button, .button {
                    background-color: var(--primary);
                    color: white;
                    border: none;
                    padding: 10px 20px;
                    border-radius: 4px;
                    cursor: pointer;
                    font-weight: 500;
                    text-transform: uppercase;
                    letter-spacing: 0.5px;
                    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
                  }
                  
                  button:hover, .button:hover {
                    background-color: var(--secondary);
                    box-shadow: 0 4px 8px rgba(0,0,0,0.3);
                  }
                ` : ''}
                
                /* Custom styles for wireframe elements */
                .container {
                  max-width: 1200px;
                  margin: 0 auto;
                }
                
                .flex {
                  display: flex;
                }
                
                .flex-col {
                  flex-direction: column;
                }
                
                .grid {
                  display: grid;
                  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                  gap: 20px;
                }
                
                .responsive-img {
                  max-width: 100%;
                  height: auto;
                }
                
                /* Wireframe placeholders */
                .placeholder {
                  background-color: #e0e0e0;
                  padding: 20px;
                  text-align: center;
                  border-radius: 4px;
                  color: #757575;
                }
              </style>
            </head>
            <body>
              <div id="wireframe-container">${sanitizeHTML(htmlContent)}</div>
            </body>
          </html>
        `);
        doc.close();

        // No height calculation needed - use CSS to control iframe size

        // No cleanup needed
        return () => { };
      }
    }
  }, [htmlContent, theme, renderKey]);

  return (
    <div className="wireframe-renderer">
      {error ? (
        <div className="wireframe-error">
          <p>Unable to render wireframe: {error}</p>
          <p>Please try generating the wireframe again.</p>
        </div>
      ) : (
        <iframe
          key={renderKey}
          ref={iframeRef}
          title="Wireframe Preview"
          sandbox="allow-same-origin allow-scripts"
          className="wireframe-preview"
          style={{ border: '2px solid green' }} // Temporary visual debugging
        />
      )}
    </div>
  );
};

/**
 * Basic HTML sanitization to prevent XSS and remove unwanted elements
 */
function sanitizeHTML(html: string | null | undefined): string {
  // If html is null, undefined or not a string, return empty string
  if (!html || typeof html !== 'string') {
    console.warn('WireframeRenderer: Received invalid HTML content', typeof html);
    return '';
  }

  try {
    // Ensure it's a string (in case it's an object that can be converted to string)
    const htmlString = String(html);

    // Remove script tags and their content
    let sanitized = htmlString.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '');

    // Keep footer tags - they are needed for wireframe functionality
    // sanitized = sanitized.replace(/<footer\b[^<]*(?:(?!<\/footer>)<[^<]*)*<\/footer>/gi, '');

    // Remove on* attributes
    sanitized = sanitized.replace(/\s+on\w+\s*=\s*["']?[^"']*["']?/gi, '');

    // Remove javascript: URLs
    sanitized = sanitized.replace(/javascript:\s*[^"']*["']/gi, '');

    return sanitized;
  } catch (error) {
    console.error('Error sanitizing HTML:', error);
    return '';
  }
}

export default WireframeRenderer;
