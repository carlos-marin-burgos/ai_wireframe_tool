/**
 * Wireframe Export Service
 * Handles exporting wireframes to various formats
 */

export interface ExportOptions {
  format?: "html" | "figma-file" | "figma-components";
  filename?: string;
  includeStyles?: boolean;
  includeInteractivity?: boolean;
  quality?: "high" | "medium" | "low";
}

export interface ExportResult {
  success: boolean;
  filename: string;
  size?: number;
  error?: string;
}

class WireframeExportService {
  /**
   * Export wireframe as standalone HTML file
   */
  async exportAsHTML(
    htmlContent: string,
    options: ExportOptions = {}
  ): Promise<ExportResult> {
    try {
      if (!htmlContent || htmlContent.trim() === "") {
        throw new Error("No wireframe content to export");
      }

      const filename = options.filename || `wireframe-${Date.now()}.html`;

      // Create a complete HTML document
      const completeHTML = this.createStandaloneHTML(htmlContent, options);

      // Create and trigger download
      const blob = new Blob([completeHTML], { type: "text/html" });
      const url = URL.createObjectURL(blob);

      const link = document.createElement("a");
      link.href = url;
      link.download = filename;
      link.style.display = "none";

      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      // Clean up
      setTimeout(() => URL.revokeObjectURL(url), 1000);

      return {
        success: true,
        filename,
        size: blob.size,
      };
    } catch (error) {
      console.error("Export error:", error);
      return {
        success: false,
        filename: "",
        error: error instanceof Error ? error.message : "Export failed",
      };
    }
  }

  /**
   * Export wireframe as JSON data
   */
  async exportAsJSON(
    htmlContent: string,
    metadata: Record<string, any> = {},
    options: ExportOptions = {}
  ): Promise<ExportResult> {
    try {
      const filename = options.filename || `wireframe-data-${Date.now()}.json`;

      const exportData = {
        version: "1.0",
        exportedAt: new Date().toISOString(),
        type: "wireframe",
        content: {
          html: htmlContent,
          metadata: {
            ...metadata,
            exportOptions: options,
          },
        },
      };

      const jsonString = JSON.stringify(exportData, null, 2);
      const blob = new Blob([jsonString], { type: "application/json" });
      const url = URL.createObjectURL(blob);

      const link = document.createElement("a");
      link.href = url;
      link.download = filename;
      link.style.display = "none";

      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      setTimeout(() => URL.revokeObjectURL(url), 1000);

      return {
        success: true,
        filename,
        size: blob.size,
      };
    } catch (error) {
      console.error("JSON export error:", error);
      return {
        success: false,
        filename: "",
        error: error instanceof Error ? error.message : "JSON export failed",
      };
    }
  }

  /**
   * Create a complete standalone HTML document
   */
  private createStandaloneHTML(
    content: string,
    options: ExportOptions
  ): string {
    const title =
      options.filename?.replace(".html", "") || "Exported Wireframe";
    const includeStyles = options.includeStyles !== false;
    const includeInteractivity = options.includeInteractivity !== false;

    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <meta name="generator" content="Designetica Wireframe Tool">
    <meta name="exported-at" content="${new Date().toISOString()}">
    ${includeStyles ? this.getEmbeddedStyles() : ""}
    ${includeInteractivity ? this.getInteractivityScripts() : ""}
</head>
<body>
    <div class="wireframe-export-container">
        <div class="export-header">
            <h1>ðŸŽ¨ ${title}</h1>
            <p>Generated by Designetica Wireframe Tool</p>
            <p class="export-date">Exported on ${new Date().toLocaleDateString()}</p>
        </div>
        <div class="wireframe-content">
            ${content}
        </div>
        <div class="export-footer">
            <p>Created with <a href="https://designetica.app" target="_blank">Designetica</a></p>
        </div>
    </div>
</body>
</html>`;
  }

  /**
   * Get embedded CSS styles for the exported wireframe
   */
  private getEmbeddedStyles(): string {
    return `
    <style>
        /* Reset and base styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            background: #f5f5f5;
        }

        .wireframe-export-container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
            min-height: 100vh;
        }

        .export-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
            border-bottom: 3px solid #5a67d8;
        }

        .export-header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            font-weight: 700;
        }

        .export-header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .export-date {
            font-size: 0.9rem !important;
            margin-top: 10px !important;
            opacity: 0.7 !important;
        }

        .wireframe-content {
            padding: 40px;
            min-height: 600px;
        }

        .export-footer {
            background: #f8f9fa;
            padding: 20px;
            text-align: center;
            border-top: 1px solid #e9ecef;
            color: #6c757d;
        }

        .export-footer a {
            color: #5a67d8;
            text-decoration: none;
            font-weight: 600;
        }

        .export-footer a:hover {
            text-decoration: underline;
        }

        /* Preserve existing wireframe styles */
        .card, .button, .btn {
            transition: all 0.2s ease;
            border: 2px dashed rgba(156, 163, 175, 0.4);
        }

        .card:hover {
            border-color: rgba(75, 85, 99, 0.8);
        }

        .button:hover, .btn:hover {
            border-color: rgba(75, 85, 99, 0.8);
        }

        /* Microsoft Learn specific styles */
        .microsoftlearn-card {
            border: 1px solid #e1e1e1;
            border-radius: 8px;
            padding: 20px;
            margin: 10px 0;
            background: white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .breadcrumb {
            background: #f8f9fa;
            padding: 10px 20px;
            border-radius: 4px;
            margin-bottom: 20px;
        }

        /* Responsive design */
        @media (max-width: 768px) {
            .wireframe-content {
                padding: 20px;
            }
            
            .export-header h1 {
                font-size: 2rem;
            }
        }

        /* Print styles */
        @media print {
            .export-header {
                background: #333 !important;
                color: white !important;
            }
            
            .wireframe-export-container {
                box-shadow: none;
            }
        }
    </style>`;
  }

  /**
   * Get interactivity scripts for the exported wireframe
   */
  private getInteractivityScripts(): string {
    return `
    <script>
        // Basic interactivity for exported wireframe
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Exported wireframe loaded');
            
            // Add click handlers for buttons and links
            const clickableElements = document.querySelectorAll('button, .button, .btn, .card[data-clickable], [role="button"]');
            
            clickableElements.forEach(element => {
                element.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    // Visual feedback
                    this.style.transform = 'scale(0.95)';
                    setTimeout(() => {
                        this.style.transform = '';
                    }, 150);
                    
                    // Simple notification
                    const text = this.textContent || this.getAttribute('aria-label') || 'Element';
                    console.log('Clicked:', text.trim());
                    
                    // You could add more sophisticated interaction here
                    if (window.confirm('This is a wireframe export. Would you like to know more about this element?')) {
                        alert('Element: ' + text.trim() + '\\n\\nThis wireframe was created with Designetica.');
                    }
                });
            });
            
            // Add hover effects
            const hoverElements = document.querySelectorAll('.card, .button, .btn');
            hoverElements.forEach(element => {
                element.style.cursor = 'pointer';
            });
        });
    </script>`;
  }

  /**
   * Generate export filename based on current date and content
   */
  generateFilename(
    prefix: string = "wireframe",
    extension: string = "html"
  ): string {
    const date = new Date();
    const dateStr = date.toISOString().split("T")[0]; // YYYY-MM-DD
    const timeStr = date.toTimeString().split(" ")[0].replace(/:/g, "-"); // HH-MM-SS
    return `${prefix}-${dateStr}-${timeStr}.${extension}`;
  }

  /**
   * Validate export options
   */
  validateExportOptions(options: ExportOptions): {
    valid: boolean;
    errors: string[];
  } {
    const errors: string[] = [];

    if (!["html", "figma-file", "figma-components"].includes(options.format)) {
      errors.push("Invalid export format");
    }

    if (options.filename && !/^[a-zA-Z0-9\-_. ]+$/.test(options.filename)) {
      errors.push("Invalid filename characters");
    }

    if (
      options.quality &&
      !["high", "medium", "low"].includes(options.quality)
    ) {
      errors.push("Invalid quality setting");
    }

    return {
      valid: errors.length === 0,
      errors,
    };
  }
}

export const wireframeExportService = new WireframeExportService();
export default wireframeExportService;
